const Event = require('../models/Event');

/**
 * Middleware pour v√©rifier le code administrateur
 */
const verifyAdminCode = async (req, res, next) => {
  try {
    const { adminCode } = req.params;
    console.log('üîê VerifyAdminCode - AdminCode re√ßu:', adminCode);
    
    if (!adminCode) {
      console.log('‚ùå VerifyAdminCode - Pas de code admin');
      return res.status(400).json({
        success: false,
        message: 'Code administrateur requis'
      });
    }

    // Rechercher l'√©v√©nement par code admin
    const event = await Event.findOne({ 
      adminCode: adminCode.toUpperCase(),
      isActive: true 
    });

    console.log('üîç VerifyAdminCode - √âv√©nement trouv√©:', event ? event.name : 'AUCUN');

    if (!event) {
      console.log('‚ùå VerifyAdminCode - √âv√©nement non trouv√©');
      return res.status(404).json({
        success: false,
        message: '√âv√©nement non trouv√© ou inactif'
      });
    }

    // V√©rifier si l'√©v√©nement n'est pas expir√© (30 jours)
    const thirtyDaysAgo = new Date();
    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
    
    if (event.createdAt < thirtyDaysAgo) {
      return res.status(410).json({
        success: false,
        message: 'Cet √©v√©nement a expir√© (plus de 30 jours)'
      });
    }

    // Ajouter l'√©v√©nement √† la requ√™te
    req.event = event;
    console.log('‚úÖ VerifyAdminCode - Pass√© avec succ√®s, event attach√©');
    next();

  } catch (error) {
    console.error('Erreur lors de la v√©rification du code admin:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur interne du serveur'
    });
  }
};

/**
 * Middleware pour v√©rifier que l'√©v√©nement appartient bien au code admin
 */
const verifyEventOwnership = async (req, res, next) => {
  try {
    const { eventId } = req.params;
    const { adminCode } = req.params;

    if (!eventId || !adminCode) {
      return res.status(400).json({
        success: false,
        message: 'ID √©v√©nement et code admin requis'
      });
    }

    const event = await Event.findOne({
      _id: eventId,
      adminCode: adminCode.toUpperCase(),
      isActive: true
    });

    if (!event) {
      return res.status(404).json({
        success: false,
        message: '√âv√©nement non trouv√© ou acc√®s non autoris√©'
      });
    }

    req.event = event;
    next();

  } catch (error) {
    console.error('Erreur lors de la v√©rification de propri√©t√©:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur interne du serveur'
    });
  }
};

/**
 * Middleware pour logger les actions administratives
 */
const logAdminAction = (action) => {
  return (req, res, next) => {
    const startTime = Date.now();
    
    // Logger la requ√™te
    console.log(`[ADMIN ACTION] ${action}`, {
      adminCode: req.params.adminCode,
      ip: req.ip,
      userAgent: req.get('User-Agent'),
      timestamp: new Date().toISOString()
    });

    // Logger la r√©ponse
    const originalSend = res.send;
    res.send = function(data) {
      const duration = Date.now() - startTime;
      console.log(`[ADMIN ACTION COMPLETE] ${action}`, {
        adminCode: req.params.adminCode,
        statusCode: res.statusCode,
        duration: `${duration}ms`,
        timestamp: new Date().toISOString()
      });
      originalSend.call(this, data);
    };

    next();
  };
};

module.exports = {
  verifyAdminCode,
  verifyEventOwnership,
  logAdminAction
};
